apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'io.fabric'

android {
    compileSdkVersion 33
    ndkVersion '25.1.8937393'
    defaultConfig {
        applicationId "com.abecerra.gnssanalysis"
        minSdkVersion 26
        targetSdkVersion 33
        versionCode 1
        versionName "0.1"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled = true
    }

    signingConfigs {
        def keystorePropertiesFile = rootProject.file("keystore/keystore.properties")
        def keystoreProperties = new Properties()
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

        debug {
            storeFile file(keystoreProperties['debugStoreFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['debugKeyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
        release {
            storeFile file(keystoreProperties['releaseStoreFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['releaseKeyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
        production {
            storeFile file(keystoreProperties['productionStoreFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['productionKeyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            debuggable true
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        production {
            signingConfig signingConfigs.production
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
}

configurations {
    ktlint
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'org.jetbrains.anko:anko-commons:0.10.6'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.1.0'
    ktlint "com.github.shyiko:ktlint:0.15.0"

    // Android
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'

    // Google
    implementation 'com.google.android.gms:play-services-maps:17.0.0'
    implementation 'com.google.code.gson:gson:2.8.5'

    // Firebase
    implementation 'com.google.firebase:firebase-core:17.2.0'
    implementation 'com.google.firebase:firebase-storage:19.0.1'
    implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'

    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.4.0'
    implementation 'com.squareup.retrofit2:converter-moshi:2.4.0'
    implementation 'com.squareup.moshi:moshi:1.7.0'
    implementation 'com.squareup.moshi:moshi-kotlin:1.7.0'
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.11.0'

    // Koin
    implementation "org.koin:koin-android:2.0.0"
    implementation "org.koin:koin-android-scope:2.0.0"
    implementation "org.koin:koin-android-viewmodel:2.0.0"

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.8.0'
    kapt "com.github.bumptech.glide:compiler:4.7.1"

    // RX
    implementation 'io.reactivex.rxjava2:rxkotlin:2.3.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.2'

    // Android Architecture
    implementation 'androidx.lifecycle:lifecycle-extensions:2.1.0'
    kapt 'androidx.lifecycle:lifecycle-compiler:2.1.0'

    // Math
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'

    // Other Libraries
    implementation 'com.jakewharton.timber:timber:4.7.1'
    implementation 'com.aurelhubert:ahbottomnavigation:2.1.0'
    implementation 'jp.wasabeef:glide-transformations:4.0.1'

    //PVT
    implementation project(':pvt-acquisition')
    implementation project(':pvt-computation')
}

android.applicationVariants.all { variant ->
    variant.mergeResources.doLast{
        generateAppIconResource(variant)
    }
}

// Method to generate pvtApp icons with debug, rc or gold badges.
private void generateAppIconResource(buildVariant) {

    def buildInfo = extractBuildInfo(buildVariant)
    println "INFOOO -> $buildInfo"

    def dpis = ["xxxhdpi", "xxhdpi", "xhdpi", "hdpi", "mdpi"];
    def pixelSizes = ["192", "144", "96", "72", "48"];

    dpis.eachWithIndex { String dpi, int i ->
        def launcherPath = "$rootProject.projectDir/pvtApp/src/main/res/mipmap-$dpi/ic_launcher.png"
        def launcherDest = "$rootProject.projectDir/pvtApp/src/$buildInfo.baseBuildType/res/mipmap-$dpi"

        def destinationDirectory = new File(launcherDest)
        if (!destinationDirectory.exists()) {
            destinationDirectory.mkdirs()
        }

        // Do not modify icon for release candidates
        if (buildInfo.baseBuildType == "production"){
            copy {
                from launcherPath
                into launcherDest
            }
            println "copy $launcherPath to $launcherDest"
            return
        }

        def script = "applybadge.sh"
        def iconSource = launcherPath
        def iconDest = "$launcherDest/ic_launcher.png"

        def arguments = [script, iconSource, buildInfo.baseBuildType, pixelSizes[i], "android", iconDest]

        // Debug the script arguments
        println arguments.join(" ")

        exec {
            workingDir '../icontools/'
            executable "sh"
            args arguments
        }
    }
}

static def extractBuildInfo(buildVariant) {
    def buildInfo = [:]

    buildInfo.buildType = buildVariant.buildType.name
    buildInfo.baseBuildType = buildInfo.buildType.toLowerCase().replace("guardit", "").replace("unprotected", "").replace("fortesting", "")
    buildInfo.flavor = buildVariant.name.substring(0, buildVariant.name.toLowerCase().replace(buildInfo.buildType.toLowerCase(), "").length())

    buildInfo.isProtected = ((buildInfo.buildType.toLowerCase().contains("guardit")) ||
            ((!buildInfo.baseBuildType.toLowerCase().equals("debug")) && (!buildInfo.buildType.toLowerCase().contains("unprotected")))
            || (buildInfo.buildType.toLowerCase().contains("fortesting")))

    buildInfo.isDebug = buildInfo.baseBuildType.toLowerCase().equals("debug")

    buildInfo.isTesting = buildInfo.buildType.toLowerCase().contains("fortesting")

    return buildInfo
}


task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "src/**/*.kt"
    // args "--reporter=checkstyle, output=${buildDir}/ktlint.xml
}

//preBuild.dependsOn ktlint

apply plugin: 'com.google.gms.google-services'
